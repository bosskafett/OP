import Classesvar ENGINE = new Object();var serv:XMLSocket = new XMLSocket();var WORLD = new Object();var Clients = new Object();var MathObject = new Object();var Sys = new Object();var Jokes = new Classes.Jokes();var Lang = new Classes.Language();var Project = new Classes.Project();var Config = new Classes.Configuration_Loader();Jokes.jokes = new Object();Lang.strings = new Object();_global.strlang = function(id){	return Lang.getString(id);}#include "Information/crumbs.as"#include "Information/jokes.as"#include "Information/colors.as"#include "Information/strings.as"#include "Information/general.as"#include "Information/errors.as"#include "Include/server_response.as"#include "Include/configuration.as"Config.set_data(local_config);if(!_root.lang) 	_root.lang = Config.config_get("default_lang");WORLD.login = new Object();WORLD.ROOM = room_mc;WORLD.PLAYERS = room_mc.players_mc;WORLD.playerPush = new Array();Lang.setLanguage(_root.lang);_global.version = Project.getVersion();function openServer(isLogin, username, password){	WORLD.isLogin = true;	WORLD.login.myUsername = username;	WORLD.login.myPassword = password;	trace(Config.config_get("SERV_HOST"));	serv.connect(Config.config_get("SERV_HOST"),Config.config_get("SERV_PORT"));}function sendChat(message){	if (message == "" || message == null || message == undefined)	{		return;	}	Sys.makeXt("sm",[message]);}function sendEmote(emote){	if (emote == 0)	{		return;	}	Sys.makeXt("se",[emote]);}function handleConnect(success){	if (success)	{		if (WORLD.isLogin == true)		{			Sys.makeXt("aut",[WORLD.login.myUsername, WORLD.login.myPassword]);		}	}}function buildEverything(){	Jokes();}function Jokes(){	}function handleConnectionClosed(){	showError(1);}_global.getId = function(){	return Sys.myId;};function getRoomId(){	return Sys.myRoomId;}function handleBuildPlayer(raw){	var player = _level0.room_mc.objects.attachMovie("penguin", "penguin" + raw[1], raw[1] + 20000);	player.penguin.loadMovie(getMedia('characters', 'penguin'));	player.id = raw[1];	var split = raw[5].split("|");	player.myColor = Sys.colors[split[2]];	player.onEnterFrame = function()	{		var c = new Color(this.penguin.body);		c.setRGB(this.myColor);	};	player.onPress = function()	{		showPlayerCard(this.id);	};	if (player.id != getId())	{		player.onEnterFrame = function()		{			this.penguin.ring._visible = false;		};	}	var nickname = nicknames_mc.attachMovie("nickname", "nickname" + raw[1], raw[1]);	nickname.name_txt.text = raw[2];	var balloon = balloons_mc.attachMovie("balloon", "balloon" + raw[1], raw[1] + 1);	player._x = raw[3];	player._y = raw[4];	nickname._x = raw[3];	nickname._y = raw[4];	balloon._x = raw[3];	balloon._y = raw[4];	addUser(raw,player);}function handleSetColor(id){	var mc = WORLD.ROOM.objects["penguin" + id];	var c = new Color(mc.penguin.body);	c.setRGB(mc.myColor);}function handleUpdateItem(type, value, id){	var mc = WORLD.ROOM.objects["penguin" + id];	if(type == "color"){		mc.myColor = Sys.colors[value];	}	mc[type].loadMovie(getMedia("clothing/sprites", value));	playercard_mc.art_mc.updateItem(type,value);	handleSetColor(id);}function handleAddAll(){	for(var i in Sys.crumbs.items){		addItem(i);	}}function handleAddItem(id){	if(Sys.crumbs.items[id].type == undefined)		return;	var item_arr = Clients[getId()].obj.inventory.split("/");	for(var it in item_arr){		if(item_arr[it] == id){			showError(5);			show = 2;			return;		}	}	if(show == 2)		return;	showMessage(Sys.crumbs.nameItems[id].name + " is now in your inventory!");	Clients[getId()].obj.inventory = Clients[getId()].obj.inventory + "/" + id;}function handleRemoveItem(id, inventory){	showMessage(Sys.crumbs.nameItems[id].name + " has been removed from your inventory!");	Clients[getId()].obj.inventory = inventory;}function handleSendMessage(id, message){	var balloon = balloons_mc["balloon" + id];	balloon.bubble._visible = true;	balloon.test_txt._visible = false;	balloon.test_txt.text = message;	balloon._x = WORLD.ROOM.objects["penguin" + id]._x;	balloon._y = WORLD.ROOM.objects["penguin" + id]._y;	if (balloon.test_txt.maxscroll == 1)	{		balloon.txt.gotoAndPlay(1);		balloon.txt.output.text = message;		balloon.bubble.gotoAndStop(3);		balloon.bubble.ib.gotoAndPlay(1);	}	else if (balloon.test_txt.maxscroll == 2)	{		balloon.txt.gotoAndPlay(201);		balloon.txt.output.text = message;		balloon.bubble.gotoAndStop(2);		balloon.bubble.ibb.gotoAndPlay(2);	}	else if (balloon.test_txt.maxscroll >= 3)	{		balloon.txt.gotoAndPlay(401);		balloon.txt.output.text = message;		balloon.bubble.gotoAndStop(1);		balloon.bubble.ibbb.gotoAndPlay(1);	}}function handleRemovePlayer(id){	var mc = WORLD.ROOM.objects["penguin" + id];	var balloon = balloons_mc["balloon" + id];	var nickname = nicknames_mc["nickname" + id];	mc.removeMovieClip();	balloon.removeMovieClip();	nickname.removeMovieClip();}function handleSendEmote(id, emote){	var balloon = balloons_mc["balloon" + id];	balloon.bubble._visible = true;	balloon.bubble.gotoAndStop(4);	balloon.bubble.emote_mc.gotoAndPlay(1);	balloon.bubble.emote_mc.emote_mc.gotoAndStop(emote);	balloon.txt.output.text = "";}function handleMouseDown(){	var targetx = Math.round(_xmouse);	var targety = Math.round(_ymouse);	for (var penguin in WORLD.ROOM.objects)	{		if (penguin.substr(0, 3) == "pen")		{			var mc = WORLD.ROOM.objects[penguin];			if (mc.penguin.hitTest(targetx, targety, true))			{				return;			}		}	}	if (dock_mc.hitTest(targetx, targety, true))	{		return;	}	if (action_mc.hitTest(targetx, targety, true))	{		return;	}	if (playercard_mc.hitTest(targetx, targety, true))	{		return;	}	if (interface_mc.hitTest(targetx, targety, true))	{		return;	}	if (shadow_mc.hitTest(targetx, targety, true) && shadow_mc._visible == true)	{		return;	}	findPlayerPath(targetx,targety);}function sendToMouse(){	playercard_mc.art_mc._x = _xmouse;	playercard_mc.art_mc._y = _ymouse;}function startSendToMouse(){	_global.toMouse = setInterval(sendToMouse, 1);}function stopSendToMouse(){	clearInterval(_global.toMouse);}function handleMouseMove(){	var mc = WORLD.ROOM.objects["penguin" + getId()];	if (mc.busy == true)	{		return;	}	var playerx = mc._x;	var playery = mc._y;	var mousex = _xmouse;	var mousey = _ymouse;	var angle = findAngle(playerx, playery, mousex, mousey);	var direction = findDirection(angle);	if (mc.Busy != true)	{		mc.Frame = direction;		handleSetFrame(getId(),direction);	}}function handleLoadRoom(id){	WORLD.ROOM.loadMovie(getMedia('rooms', id));}function handleSetFrame(id, frame, isBusy){	var mc = WORLD.ROOM.objects["penguin" + id];	if (mc.busy == true)	{		return;	}	mc.penguin.gotoAndStop(frame);	mc.head.gotoAndStop(frame);	mc.body.gotoAndStop(frame);	mc.neck.gotoAndStop(frame);	mc.hand.gotoAndStop(frame);	mc.feet.gotoAndStop(frame);	handleSetColor(id);	if (isBusy == true)	{		mc.busy = true;	}}function handleSendJokes(joke){	if (_global.interval == 0)	{		sendChat(Jokes.jokes[joke].question);		_global.interval++;	}	else	{		sendChat(Jokes.jokes[joke].answer);		_global.interval = 0;		clearInterval(Sys.jokerval);	}}function handleBuildPenguins(){	WORLD.PLAYERS = room_mc.players_mc;	var c = 0;	for (var i in WORLD.playerPush)	{		c++;		if (WORLD.PLAYERS == undefined)		{			continue;		}		var raw = WORLD.playerPush[i].raw;		var player = _level0.room_mc.objects.attachMovie("penguin", "penguin" + raw[1], raw[1] + 20000);		player.penguin.loadMovie(getMedia('characters', 'penguin'));		player.id = raw[1];		var split = raw[5].split("|");		player.myColor = Sys.colors[split[2]];		player.onEnterFrame = function()		{			var c = new Color(this.penguin.body);			c.setRGB(this.myColor);		};		player.onPress = function()		{			showPlayerCard(this.id);		};		if (player.id != getId())		{			player.onEnterFrame = function()			{				this.penguin.ring._visible = false;			};		}		var nickname = _root.nicknames_mc.attachMovie("nickname", "nickname" + raw[1], raw[1]);		nickname.name_txt.text = raw[2];		var balloon = _root.balloons_mc.attachMovie("balloon", "balloon" + raw[1], raw[1] + 1);		player._x = raw[3];		player._y = raw[4];		nickname._x = raw[3];		nickname._y = raw[4];		balloon._x = raw[3];		balloon._y = raw[4];		addUser(raw,player);	}}function addItem(id){	Sys.makeXt("ai", [id]);}function removeItem(id){	Sys.makeXt("ri", [id]);}function enableItem(id){	Sys.makeXt("u#" + Sys.crumbs.items[id].type.substr(0, 3).toLowerCase(),[id]);	Clients[getId()][Sys.crumbs.items[id].type.toLowerCase()] = id;	Clients[getId()].obj[Sys.crumbs.items[id].type.toLowerCase()] = id;}function disableItem(type){	Sys.makeXt("dis",[type]);	Clients[getId()][type.toLowerCase()] = 0;	Clients[getId()].obj[type.toLowerCase()] = 0;}function showPlayerCard(id){	var client = Clients[id];	playercard_mc.gotoAndStop(2);	playercard_mc.playercard(client.obj);}function getColor(id){	return Sys.colors[id];}function playerLoop(){	for (var i in WORLD.ROOM.objects)	{		var mc = WORLD.ROOM.objects[i];		updatePlayerDepth(mc);	}}setInterval(playerLoop,1);function findPlayer(id){	var client = Clients[id];	displayWindow('info',client.name + " is at the " + client.room,"Okay");}function Clients(id){}function showMessage(message, tag){	if(!tag)		tag = "Okay";	if(!message)		message = "Message Prompt.";	displayWindow('info',message,tag);}function getMedia(folder, file, ext){	if (ext == undefined)	{		ext = "swf";	}	var Url = "http://" + Sys.Play + "/media/" + folder + "/" + file + "." + ext;	return Url;}function updatePlayerDepth(mc){	var x = Math.floor(mc._x);	var y = Math.floor(mc._y);	var d = 99 + 1901 * y;	mc.swapDepths(d);}function addUser(raw, mc){	Clients[raw[1]] = new Classes.Client(raw[5], mc, raw[6]);}function findAngle(x1, y1, x2, y2){	var diffx = x2 - x1;	var diffy = y2 - y1;	var angle = int(Math.atan2(diffy, diffx) * 57.295780 - 90);	if (angle < 0)	{		return (angle + 360);	}	else	{		return (angle);	}}function findDistance(x1, y1, x2, y2){	var diffx = x2 - x1;	var diffy = y2 - y1;	return (Math.sqrt(diffx * diffx + diffy * diffy));}function findDirection(angle){	var dir = Math.round(angle / 45) + 1;	if (dir > 8)	{		dir = 1;	}	return (dir);}function findPlayerPath(targetx, targety){	var mcPlayer = WORLD.ROOM.objects["penguin" + getId()];	var px = Math.round(mcPlayer._x);	var py = Math.round(mcPlayer._y);	var tx = Math.round(targetx);	var ty = Math.round(targety);	var distance = findDistance(px, py, tx, ty);	if (distance > 0)	{		var steps = Math.round(distance);		var movex = (tx - px) / steps;		var movey = (ty - py) / steps;		var safex = px;		var safey = py;		var x = px;		var y = py;		var startBlocked = WORLD.ROOM.block_mc.hitTest(x, y, true);		while (steps > 0)		{			x = x + movex;			y = y + movey;			if (WORLD.ROOM.block_mc.hitTest(x, y, true))			{				if (!startBlocked)				{					targetx = safex;					targety = safey;					break;				}			}			else			{				startBlocked = false;				safex = Math.round(x);				safey = Math.round(y);			}			--steps;		}		distance = findDistance(px, py, safex, safey);		if (distance > 10)		{			sendMove(targetx,targety,frame);		}	}}function sendMove(x, y){	movePlayer(getId(),x,y);	sendPosition(x,y);}function sendPosition(x, y){	x = Math.round(x);	y = Math.round(y);	if (x > 0 && y > 0)	{		Sys.makeXt("sp",[x, y]);	}}function movePlayer(id, x2, y2){	var mcPlayer = WORLD.ROOM.objects["penguin" + id];	var ba = WORLD.PLAYERS["balloon" + id];	var nickname = _root.nicknames_mc["nickname" + id];	var balloon = _root.balloons_mc["balloon" + id];	var x1 = mcPlayer._x;	var y1 = mcPlayer._y;	mcPlayer.busy = true;	if (x1 != x2 && y1 != y2 && !world_mc.room_mc.block_mc.hitTest(mcPlayer._x, mcPlayer._y, true))	{		var distance = findDistance(x1, y1, x2, y2);		var duration = distance / 4;		var changex = x2 - x1;		var changey = y2 - y1;		var a = findAngle(x1, y1, x2, y2);		var dir = findDirection(a);		var dir2 = dir + 8;		mcPlayer.penguin.gotoAndStop(dir2);		mcPlayer.head.gotoAndStop(dir2);		mcPlayer.face.gotoAndStop(dir2);		mcPlayer.hand.gotoAndStop(dir2);		mcPlayer.feet.gotoAndStop(dir2);		mcPlayer.body.gotoAndStop(dir2);		mcPlayer.neck.gotoAndStop(dir2);		handleSetColor(id);		mcPlayer.specialFrame = true;		mcPlayer.isMoving = true;		var t = 0;		var easeIt = MathObject.linearTween;		mcPlayer.onEnterFrame = function()		{			++t;			if (t < duration)			{				PLAYER.moving = true;				x = easeIt(t, x1, changex, duration);				y = easeIt(t, y1, changey, duration);				mcPlayer._x = x;				mcPlayer._y = y;				ba._x = x;				ba._y = y;				nickname._x = x;				nickname._y = y;				balloon._x = x;				balloon._y = y;				handleSetColor(id);			}			else			{				if (id == getId())				{					mcPlayer.moving = false;				}				mcPlayer._x = x2;				mcPlayer._y = y2;				nickname._x = x2;				nickname._y = y2;				balloon._x = x2;				balloon._y = y2;				mcPlayer.penguin.gotoAndStop(dir);				mcPlayer.head.gotoAndStop(dir);				mcPlayer.face.gotoAndStop(dir);				mcPlayer.hand.gotoAndStop(dir);				mcPlayer.feet.gotoAndStop(dir);				mcPlayer.body.gotoAndStop(dir);				mcPlayer.neck.gotoAndStop(dir);				mcPlayer.busy = false;				handleSetColor(id);				this.onEnterFrame = null;			}		};	}}function displayWindow(window, message, ok){	interface_mc.gotoAndStop(window);	interface_mc.message_txt.text = message;	interface_mc.ok_txt.text = ok;	shadow_mc._visible = true;}function showAlerts(alerts:Number) {	if(!alerts > 0)		return;	mail_btn.alerts_mc._visible = true;	mail_btn.alerts_mc.alerts_txt.text = alerts;}function removeAlerts() {	mail_btn.alerts_mc._visible = false;	mail_btn.alerts_mc.alerts_txt.text = 0;	Clients[getId()].alerts = 0;}function showLoadingScreen(message, isLogin){	load_mc._visible = true;	load_mc.load_txt.text = message;	_global.isLogin = true;}function hideLoadingScreen(){	load_mc._visible = false;}function showError(id){	displayWindow(Sys.systemErrors[id].type,Sys.systemErrors[id].message,Sys.systemErrors[id].button);	trace("Showing Error " + id);}Sys.getMyPlayer = function(){	return WORLD.ROOM.objects["penguin" + getId()];};Sys.makeXt = function(header, obj){	var s:String = "";	obj.reverse();	for (var xt in obj)	{		s = s + obj[xt] + "%";	}	var data_str = "%" + header + "%" + s;	serv.send(data_str);};MathObject.linearTween = function(t, b, c, d){	return (c * t / d + b);};keyListener = new Object();keyListener.onKeyDown = function(){	if (!_root._currentframe == "chat" || !_root._currentframe == 11)	{		return;	}	if (Key.getCode() == Key.ENTER)	{		if (Selection.getFocus() != "_level0.dock_mc.chat_mc.chat_txt" || _level0.dock_mc.chat_mc.chat_txt.text == "")		{			Selection.setFocus(null);		}	}	if (Selection.getFocus() == "_level0.dock_mc.chat_mc.chat_txt")	{		return;	}	if (Key.getCode() == 68)	{		Sys.makeXt("sf",[26]);	}	else if (Key.getCode() == 87)	{		Sys.makeXt("sf",[25]);	}	else if (Key.getCode() == 83)	{		if (WORLD.ROOM.objects["penguin" + getId()].busy != true)		{			trace(WORLD.ROOM.objects["penguin" + getId()].penguin._currentframe);			Sys.makeXt("sf",[WORLD.ROOM.objects["penguin" + getId()].penguin._currentframe + 16]);		}	}	else if (Key.getCode() == 72)	{		sendChat(strlang("hello"));	}	else if (Key.getCode() == 66)	{		sendChat(strlang("bye"));	}	else if (Key.getCode() == 72)	{		sendChat(strlang("hello"));	}	else if (Key.getCode() == 74)	{		_global.interval = 0;		clearInterval(Sys.jokerval);		var myjoke = Jokes.getRandomJoke();		handleSendJokes(myjoke);		Sys.jokerval = setInterval(handleSendJokes, 3000, myjoke);	}	else if (Key.getCode() == 78)	{		sendChat(strlang("no"));	}	else if (Key.getCode() == 89)	{		sendChat(strlang("yes"));	}	else if (Key.getCode() == 76)	{		sendChat("Lol");	}	else if (Key.isDown(69))	{		if (Key.isDown(49))		{			sendEmote(1);		}		else if (Key.isDown(50))		{			sendEmote(2);		}		else if (Key.isDown(51))		{			sendEmote(3);		}		else if (Key.isDown(52))		{			sendEmote(4);		}		else if (Key.isDown(53))		{			sendEmote(5);		}		else if (Key.isDown(54))		{			sendEmote(6);		}		else if (Key.isDown(55))		{			sendEmote(7);		}		else if (Key.isDown(56))		{			sendEmote(8);		}		else if (Key.isDown(57))		{			sendEmote(9);		}		else if (Key.isDown(48))		{			sendEmote(10);		}		else if (Key.isDown(84))		{			sendEmote(19);		}		else if (Key.isDown(73))		{			sendEmote(20);		}		else if (Key.isDown(67))		{			sendEmote(25);		}		else if (Key.isDown(80))		{			sendEmote(21);		}	}};Key.addListener(keyListener);_global.showTip = function(message, instance){	_root.tip_mc.gotoAndPlay(1);	_root.tip_mc._x = _xmouse;	_root.tip_mc._y = _ymouse;	_root.tip_mc.tip = message;};_global.hideTip = function(){	_root.tip_mc.gotoAndPlay(6);	_root.tip_mc.tip = "";};serv.onConnect = handleConnect;serv.onClose = handleConnectionClosed;WORLD.ROOM.load = handleLoadRoom;var stopper = false;_global.interval = 0;this.onMouseDown = handleMouseDown;this.onMouseMove = handleMouseMove;XMLSocket.prototype.onData = handleData;shadow_mc._visible = false;Sys.Play = Config.config_get("HOST");